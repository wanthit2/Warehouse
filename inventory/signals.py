from django.db.models.signals import post_save, post_delete
from django.dispatch import receiver
from django.contrib.auth.models import User
from .models import UserProfile, Order, Stock, Product


@receiver(post_save, sender=User)
def create_user_profile(sender, instance, created, **kwargs):
    if created:
        UserProfile.objects.create(user=instance)

@receiver(post_save, sender=User)
def save_user_profile(sender, instance, **kwargs):
    instance.profile.save()



### üîπ ‡∏•‡∏î Stock ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
@receiver(post_save, sender=Order)
def reduce_stock_on_order(sender, instance, created, **kwargs):
    if created:  # ‚úÖ ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
        if not instance.product:
            print(f"‚ö†Ô∏è ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ ID {instance.order_id} ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏î Stock ‡πÑ‡∏î‡πâ!")
            return

        try:
            # ‚úÖ ‡∏•‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏Ñ‡∏•‡∏±‡∏á Stock
            stock = Stock.objects.filter(product=instance.product, shop=instance.shop).first()
            if stock:
                if stock.quantity >= instance.quantity:
                    stock.quantity -= instance.quantity  # ‚úÖ ‡∏•‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô Stock
                    stock.save()
                    print(f"‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ï‡πä‡∏≠‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠: {stock.quantity} ‡∏ä‡∏¥‡πâ‡∏ô")
                else:
                    print(f"‚ö†Ô∏è ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ {instance.product.product_name} ‡πÑ‡∏°‡πà‡∏û‡∏≠‡πÉ‡∏ô‡∏™‡∏ï‡πä‡∏≠‡∏Å!")
            else:
                print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö Stock ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ {instance.product.product_name}")

        except Stock.DoesNotExist:
            print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ {instance.product.product_name} ‡πÉ‡∏ô‡∏™‡∏ï‡πä‡∏≠‡∏Å!")




### üîπ ‡∏•‡∏ö Stock ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ñ‡∏π‡∏Å‡∏•‡∏ö
@receiver(post_delete, sender=Product)
def delete_product_stock(sender, instance, **kwargs):
    try:
        print(f"üóëÔ∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ {instance.product_name} ‡∏à‡∏≤‡∏Å Stock...")
        Stock.objects.filter(product=instance).delete()
        print(f"‚úÖ ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ {instance.product_name} ‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏à‡∏≤‡∏Å Stock ‡πÅ‡∏•‡πâ‡∏ß")
    except Exception as e:
        print(f"‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö Stock: {e}")



@receiver(post_save, sender=Product)
def update_stock_on_create(sender, instance, created, **kwargs):
    if created:  # ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà
        instance.stock_quantity = instance.quantity
        instance.save()
