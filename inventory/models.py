from django.contrib.auth import get_user_model
from django.db import models
from django.utils import timezone
from django.contrib.auth.models import AbstractUser
from django.conf import settings
from django.db.models.signals import pre_save
from django.dispatch import receiver
from django.apps import apps
from django.db.models.signals import pre_save, post_save, post_delete





### üîπ ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (Custom User)
class CustomUser(AbstractUser):
    USER_TYPE_CHOICES = [
        ('admin', '‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô'),
        ('shop_owner', '‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô'),
        ('customer', '‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤'),
    ]

    username = models.CharField(max_length=150, unique=True)
    user_type = models.CharField(
        max_length=20,
        choices=USER_TYPE_CHOICES,
        default='customer',
        verbose_name="‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"
    )

    is_superadmin = models.BooleanField(default=False, verbose_name='‡∏ã‡∏∏‡∏õ‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô')
    is_shop_owner = models.BooleanField(default=False, verbose_name='‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô')
    is_admin = models.BooleanField(default=False, verbose_name='‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô')
    is_shop_owner_requested = models.BooleanField(default=False)
    is_shop_owner_approved = models.BooleanField(default=False)
    shop_name = models.CharField(max_length=255, blank=True, null=True)
    reason = models.TextField(blank=True, null=True)

    def __str__(self):
        return self.username


class Shop(models.Model):
    name = models.CharField(max_length=255, verbose_name="‡∏ä‡∏∑‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô")
    location = models.CharField(max_length=255, blank=True, default="‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Å‡∏≥‡∏´‡∏ô‡∏î", verbose_name="‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡∏£‡πâ‡∏≤‡∏ô")
    owner = models.ForeignKey(
        get_user_model(), on_delete=models.CASCADE, related_name="owned_shops", verbose_name="‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô"
    )
    admins = models.ManyToManyField(
        settings.AUTH_USER_MODEL, related_name="admin_shops", blank=True, verbose_name="‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤"
    )
    created_at = models.DateTimeField(auto_now_add=True, verbose_name="‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡πâ‡∏≤‡∏ô")

    class Meta:
        verbose_name = "‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤"
        verbose_name_plural = "‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"

    def __str__(self):
        return self.name


### üîπ ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (Category)
class Category(models.Model):
    name = models.CharField(max_length=255, unique=True, verbose_name="‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà")

    def __str__(self):
        return self.name

### üîπ ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (Product)
class Product(models.Model):
    shop = models.ForeignKey(Shop, related_name='products', on_delete=models.CASCADE, verbose_name="‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤")
    product_name = models.CharField(max_length=255, default='Default Product Name', verbose_name='‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤')
    product_code = models.CharField(max_length=100, unique=True, verbose_name='‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤')
    description = models.TextField(blank=True, null=True, verbose_name='‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤')
    price = models.DecimalField(max_digits=10, decimal_places=2, verbose_name='‡∏£‡∏≤‡∏Ñ‡∏≤')
    quantity = models.PositiveIntegerField(verbose_name='‡∏à‡∏≥‡∏ô‡∏ß‡∏ô')
    image = models.ImageField(upload_to='img/', blank=True, null=True, verbose_name="‡∏£‡∏π‡∏õ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤")
    stock_quantity = models.PositiveIntegerField(default=0, verbose_name="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ñ‡∏á‡∏Ñ‡∏•‡∏±‡∏á")
    added_date = models.DateTimeField(default=timezone.now, verbose_name="‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤")
    category = models.ForeignKey(Category, on_delete=models.CASCADE, null=True, blank=True)

    UNIT_CHOICES = [
        ('kg', '‡∏Å‡∏¥‡πÇ‡∏•‡∏Å‡∏£‡∏±‡∏°'),
        ('pcs', '‡∏ä‡∏¥‡πâ‡∏ô'),
    ]
    unit = models.CharField(max_length=10, choices=UNIT_CHOICES, default='pcs', verbose_name="‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤")

    STATUS_CHOICES = [
        ('available', 'Available'),
        ('out_of_stock', 'Out of Stock'),
        ('discontinued', 'Discontinued'),
    ]
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='available', verbose_name="‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤")

    class Meta:
        verbose_name = '‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤'
        verbose_name_plural = '‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î'

    def __str__(self):
        return f"{self.product_name} ({self.product_code}) - {self.get_unit_display()}"

    @property
    def total_value(self):
        return self.price * self.stock_quantity

    def save(self, *args, **kwargs):
        """ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï stock_quantity ‡∏ï‡∏≤‡∏° quantity ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà """
        if not self.pk:  # ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏≠‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà
            self.stock_quantity = self.quantity
        super().save(*args, **kwargs)




### üîπ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
@receiver(pre_save, sender=Product)
def generate_product_code(sender, instance, **kwargs):
    """ ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ """
    if not instance.product_code:
        last_product = Product.objects.all().order_by('id').last()
        if last_product and last_product.product_code.startswith("P"):
            try:
                last_id = int(last_product.product_code[1:])  # ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
                new_code = f"P{last_id + 1:03d}"  # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ ‡πÄ‡∏ä‡πà‡∏ô P001 ‚Üí P002
            except ValueError:
                new_code = "P001"  # ‚úÖ ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
        else:
            new_code = "P001"
        instance.product_code = new_code


### üîπ ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏Ñ‡∏•‡∏±‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (Stock)
class Stock(models.Model):
    shop = models.ForeignKey(Shop, on_delete=models.CASCADE, verbose_name="‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤", null=True, blank=True)
    product = models.ForeignKey(Product, related_name="stock", on_delete=models.CASCADE, null=True, blank=True)
    quantity = models.PositiveIntegerField(default=0)
    price = models.DecimalField(max_digits=10, decimal_places=2, verbose_name="‡∏£‡∏≤‡∏Ñ‡∏≤")
    added_date = models.DateField(auto_now_add=True, verbose_name="‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤")
    description = models.TextField(verbose_name="‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", blank=True, null=True)

    class Meta:
        verbose_name = "‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏Ñ‡∏•‡∏±‡∏á"
        verbose_name_plural = "‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏Ñ‡∏•‡∏±‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"

    def __str__(self):
        product_name = self.product.product_name if self.product else "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"
        shop_name = self.shop.name if self.shop else "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤"
        return f"{product_name} - {shop_name}"





### üîπ ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ (Order)
class Order(models.Model):
    order_id = models.AutoField(primary_key=True)  # ‚úÖ ‡πÉ‡∏ä‡πâ order_id ‡πÄ‡∏õ‡πá‡∏ô primary key ‡πÅ‡∏ó‡∏ô id
    product = models.ForeignKey(Product, on_delete=models.CASCADE, null=True, blank=True)
    price = models.DecimalField(max_digits=10, decimal_places=2, verbose_name='‡∏£‡∏≤‡∏Ñ‡∏≤')
    quantity = models.PositiveIntegerField(verbose_name='‡∏à‡∏≥‡∏ô‡∏ß‡∏ô')
    status = models.CharField(max_length=50, verbose_name='‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞', default='Pending')
    image = models.ImageField(upload_to='product_images/', verbose_name='‡∏£‡∏π‡∏õ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤', null=True, blank=True)
    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='orders', verbose_name='‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô')
    shop = models.ForeignKey(Shop, on_delete=models.CASCADE, verbose_name='‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤', null=True, blank=True)
    created_at = models.DateTimeField(auto_now_add=True)

    @property
    def total_price(self):
        return self.price * self.quantity

    def __str__(self):
        return f"Order {self.order_id}: {self.product.product_name if self.product else '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤'} - {self.quantity} ‡∏ä‡∏¥‡πâ‡∏ô"




### üîπ ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (UserProfile)
class UserProfile(models.Model):
    user = models.OneToOneField("inventory.CustomUser", on_delete=models.CASCADE, related_name="profile")
    phone_number = models.CharField(max_length=15, blank=True, null=True)
    address = models.TextField(blank=True, null=True)  # ‚úÖ ‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    profile_picture = models.ImageField(upload_to="profile_pictures/", blank=True, null=True)

    def __str__(self):
        return f"{self.user.username} Profile"


### üîπ ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô (ShopOwnerRequest)
class ShopOwnerRequest(models.Model):
    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
    shop_name = models.CharField(max_length=255)
    description = models.TextField()
    email = models.EmailField()
    is_approved = models.BooleanField(default=False)

    def __str__(self):
        return self.shop_name


### üîπ ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ã‡∏±‡∏û‡∏û‡∏•‡∏≤‡∏¢‡πÄ‡∏≠‡∏≠‡∏£‡πå (Supplier)
class Supplier(models.Model):
    name = models.CharField(max_length=255)
    contact_info = models.TextField()

    def __str__(self):
        return self.name



