from django import forms
from .models import Order, Product, UserProfile, Stock, CustomUser, ShopOwnerRequest, Shop, Category
from .models import CustomUser
from django.contrib.auth.forms import UserCreationForm
from django.contrib.auth.forms import AuthenticationForm


STATUS_CHOICES = [
    ('pending', '‡∏£‡∏≠‡∏à‡∏±‡∏î‡∏™‡πà‡∏á'),
    ('shipped', '‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß'),
    ('cancelled', '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å'),
]

SALES_CHANNEL_CHOICES = [
    ('‡∏´‡∏ô‡πâ‡∏≤‡∏£‡πâ‡∏≤‡∏ô', '‡∏´‡∏ô‡πâ‡∏≤‡∏£‡πâ‡∏≤‡∏ô'),
    ('‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå', '‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå'),
]


### üîπ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç `OrderForm` (‡∏•‡∏ö `store`)
class OrderForm(forms.ModelForm):
    class Meta:
        model = Order
        fields = ['quantity']

    def __init__(self, *args, **kwargs):
        self.product = kwargs.pop('product', None)
        super().__init__(*args, **kwargs)

        if self.product:
            self.fields['product_name'].initial = self.product.product_name
            self.fields['price'].initial = self.product.price

    def save(self, commit=True):
        order = super().save(commit=False)

        if self.product:
            order.product_name = self.product.product_name
            order.price = self.product.price
            order.total_price = order.price * order.quantity

            # ‚úÖ ‡πÉ‡∏ä‡πâ shop ‡πÅ‡∏ó‡∏ô store
            order.shop_id = self.product.shop.id if self.product.shop else None
            order.shop = self.product.shop

        if commit:
            order.save()
        return order


### üîπ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç `ProductForm` (‡∏•‡∏ö `store`)
class ProductForm(forms.ModelForm):
    category = forms.ModelChoiceField(
        queryset=Category.objects.all(),
        empty_label="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà",  # ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° dropdown
        required=True,
        label="‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà"  # ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô Label ‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
    )
    class Meta:
        model = Product
        fields = ['product_name', 'description', 'price', 'quantity','category', 'unit', 'image', 'stock_quantity']
        widgets = {
            'description': forms.Textarea(attrs={'rows': 4, 'cols': 40}),
        }

    def __init__(self, *args, **kwargs):
        self.shop = kwargs.pop('shop', None)  # ‚úÖ ‡∏£‡∏±‡∏ö shop ‡∏à‡∏≤‡∏Å views
        super().__init__(*args, **kwargs)

        # ‚úÖ ‡πÉ‡∏´‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÑ‡∏î‡πâ
        self.fields['category'].queryset = Category.objects.all()


    def save(self, commit=True):
        product = super().save(commit=False)
        if self.shop:
            product.shop = self.shop  # ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
        if commit:
            product.save()
        return product



### üîπ ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
class LoginForm(AuthenticationForm):
    username = forms.CharField(widget=forms.TextInput(attrs={'placeholder': 'Username'}))
    password = forms.CharField(widget=forms.PasswordInput(attrs={'placeholder': 'Password'}))


class CustomUserCreationForm(UserCreationForm):
    email = forms.EmailField(required=True, widget=forms.EmailInput(attrs={'placeholder': '‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì'}))

    class Meta:
        model = CustomUser  # ‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡πà‡∏≤‡πÉ‡∏ä‡πâ CustomUser ‡πÅ‡∏ó‡∏ô User
        fields = ['username', 'email', 'password1', 'password2']
        help_texts = {
            'username': None,
        }

    def clean(self):
        cleaned_data = super().clean()
        password1 = cleaned_data.get('password1')
        password2 = cleaned_data.get('password2')

        if password1 != password2:
            raise forms.ValidationError("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô")
        return cleaned_data





### üîπ ‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå
class UserProfileForm(forms.ModelForm):
    username = forms.CharField(max_length=150, required=True, label="‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")
    email = forms.EmailField(required=True, label="‡∏≠‡∏µ‡πÄ‡∏°‡∏•")

    class Meta:
        model = UserProfile
        fields = ['profile_picture', 'address']
        labels = {
            'profile_picture': "‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå",
            'address': "‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà",
        }
        widgets = {
            'address': forms.Textarea(attrs={'rows': 3, 'placeholder': '‡∏Å‡∏£‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì...'}),
        }

    def __init__(self, *args, **kwargs):
        user = kwargs.pop('user', None)
        super(UserProfileForm, self).__init__(*args, **kwargs)
        if user:
            self.fields['username'].initial = user.username
            self.fields['email'].initial = user.email

    def save(self, commit=True):
        profile = super(UserProfileForm, self).save(commit=False)
        if commit:
            profile.save()
        return profile


### üîπ ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏Ñ‡∏•‡∏±‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
class StockForm(forms.ModelForm):
    class Meta:
        model = Stock
        fields = ['shop', 'product', 'quantity', 'price', 'description']


class SearchStockForm(forms.Form):
    query = forms.CharField(label='‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤', max_length=100, required=False)



class ShopOwnerRequestForm(forms.ModelForm):
    class Meta:
        model = ShopOwnerRequest
        fields = ['shop_name', 'description', 'email']
        widgets = {
            'shop_name': forms.TextInput(attrs={'class': 'form-control'}),
            'description': forms.Textarea(attrs={'class': 'form-control'}),
            'email': forms.EmailInput(attrs={'class': 'form-control'})
        }

    def clean_email(self):
        email = self.cleaned_data.get('email')
        if ShopOwnerRequest.objects.filter(email=email).exists():
            raise forms.ValidationError("‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÅ‡∏•‡πâ‡∏ß")
        return email


### üîπ ‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤
class AddAdminForm(forms.Form):
    user = forms.ModelChoiceField(queryset=CustomUser.objects.filter(is_shop_owner_approved=True), label='‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô')


### üîπ ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤
class ShopForm(forms.ModelForm):
    class Meta:
        model = Shop
        fields = ['name', 'location', 'owner', 'admins']



class UserForm(forms.ModelForm):
    class Meta:
        model = CustomUser  # ‡πÉ‡∏ä‡πâ CustomUser ‡πÅ‡∏ó‡∏ô User
        fields = ['first_name', 'last_name', 'email']



class CustomUserProfileForm(forms.ModelForm):
    password1 = forms.CharField(widget=forms.PasswordInput)
    password2 = forms.CharField(widget=forms.PasswordInput)

    class Meta:
        model = CustomUser
        fields = ['username', 'email']  # ‡∏´‡∏£‡∏∑‡∏≠‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏≠‡∏Å

    def clean(self):
        cleaned_data = super().clean()
        password1 = cleaned_data.get("password1")
        password2 = cleaned_data.get("password2")

        if password1 != password2:
            raise forms.ValidationError("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô")

        return cleaned_data

    def clean_username(self):
        username = self.cleaned_data.get('username')
        if not username:
            raise forms.ValidationError("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ username ‡∏ã‡πâ‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if CustomUser.objects.filter(username=username).exists():
            raise forms.ValidationError("‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß")

        return username
